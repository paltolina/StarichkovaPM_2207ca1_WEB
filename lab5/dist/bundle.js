/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("// Функция для сохранения элементов списка в localStorage\nfunction saveList() {\n  var todoList = document.getElementById(\"todo-list\");\n  localStorage.setItem(\"todoList\", todoList.innerHTML);\n\n  // Сохраняем состояние чекбоксов\n  var checkboxes = todoList.querySelectorAll('input[type=\"checkbox\"]');\n  var checkboxStates = Array.from(checkboxes).map(function (checkbox) {\n    return checkbox.checked;\n  });\n  localStorage.setItem(\"checkboxStates\", JSON.stringify(checkboxStates));\n}\nfunction loadList() {\n  var todoList = document.getElementById(\"todo-list\");\n  var savedList = localStorage.getItem(\"todoList\");\n\n  // Если есть сохраненный список, загружаем его\n  if (savedList) {\n    todoList.innerHTML = savedList;\n\n    // Восстанавливаем состояние чекбоксов\n    var checkboxStates = JSON.parse(localStorage.getItem(\"checkboxStates\"));\n    if (checkboxStates) {\n      var checkboxes = todoList.querySelectorAll('input[type=\"checkbox\"]');\n      checkboxes.forEach(function (checkbox, index) {\n        checkbox.checked = checkboxStates[index];\n      });\n    }\n\n    // Устанавливаем обработчик клика на чекбоксы для сохранения списка\n    var checkboxes = todoList.querySelectorAll('input[type=\"checkbox\"]');\n    checkboxes.forEach(function (checkbox) {\n      checkbox.addEventListener('click', saveList);\n    });\n\n    // Устанавливаем обработчик клика на кнопки \"Удалить\"\n    var deleteButtons = todoList.querySelectorAll('button');\n    deleteButtons.forEach(function (button) {\n      button.addEventListener('click', function () {\n        clearItem(button.parentNode);\n      });\n    });\n  }\n}\n\n// Вызываем функцию загрузки при загрузке страницы\nwindow.onload = function () {\n  loadList();\n  updateTodoCount(); // Добавляем вызов функции обновления количества дел\n};\n\n// Функция для добавления нового элемента в список\nfunction addItem() {\n  var newItemInput = document.getElementById(\"new-item\");\n\n  // Проверяем, чтобы значение поля ввода было непустым\n  if (newItemInput.value.trim() !== \"\") {\n    var newItemText = newItemInput.value;\n\n    // Создаем новый элемент списка\n    var newListItem = document.createElement(\"dt\");\n    newListItem.textContent = newItemText;\n\n    // Создаем чекбокс и устанавливаем его состояние\n    var checkbox = document.createElement('input');\n    checkbox.type = \"checkbox\";\n    checkbox.checked = false;\n\n    // Добавляем чекбокс в элемент списка\n    newListItem.insertBefore(checkbox, newListItem.firstChild);\n\n    // Создаем кнопку очистки\n    var clearButton = document.createElement('button');\n    clearButton.textContent = \"Удалить\";\n    clearButton.onclick = function () {\n      clearItem(newListItem);\n    };\n    // Добавляем кнопку очистки рядом с элементом списка\n    newListItem.appendChild(clearButton);\n\n    // Добавляем новый элемент в конец списка\n    document.getElementById(\"todo-list\").appendChild(newListItem);\n\n    // Очищаем поле ввода\n    newItemInput.value = \"\";\n\n    // Сортируем список по наименованию\n    sortListByName('asc');\n\n    // Скрыть сообщение о том, что нет дел\n    document.querySelector(\".no-items-message\").style.display = \"none\";\n\n    // Обновляем количество дел\n    updateTodoCount();\n\n    // Сохраняем список в localStorage\n    saveList();\n  }\n}\n\n// Функция для очистки конкретного элемента списка\nfunction clearItem(element) {\n  var todoList = document.getElementById(\"todo-list\");\n  var itemToRemove = element;\n\n  // Удаляем элемент из списка\n  todoList.removeChild(itemToRemove);\n\n  // Сохраняем список в localStorage\n  saveList();\n\n  // Если список пуст, показываем сообщение о том, что нет дел\n  if (todoList.children.length === 0) {\n    document.querySelector(\".no-items-message\").style.display = \"block\";\n  }\n\n  // Сортируем список по наименованию\n  sortListByName('asc');\n\n  // Обновляем количество дел\n  updateTodoCount();\n}\n\n// Функция для очистки всех элементов списка\nfunction clearAll() {\n  var todoList = document.getElementById(\"todo-list\");\n\n  // Удаляем все элементы из списка\n  todoList.innerHTML = \"\";\n\n  // Показываем сообщение о том, что нет дел\n  document.querySelector(\".no-items-message\").style.display = \"block\";\n\n  // Обновляем количество дел\n  updateTodoCount();\n\n  // Сохраняем пустой список в localStorage\n  saveList();\n}\n\n// Функция для обновления количества дел для каждого режима фильтрации\nfunction updateTodoCount() {\n  var allCount = document.getElementById(\"allCount\");\n  var completedCount = document.getElementById(\"completedCount\");\n  var uncompletedCount = document.getElementById(\"uncompletedCount\");\n  var todoList = document.getElementById(\"todo-list\");\n  var todoItems = todoList.querySelectorAll(\"dt\");\n\n  // Считаем количество дел для каждого режима фильтрации\n  var all = todoItems.length;\n  var completed = 0;\n  var uncompleted = 0;\n  todoItems.forEach(function (item) {\n    item.querySelector('input[type=\"checkbox\"]').checked ? completed++ : uncompleted++;\n  });\n\n  // Обновляем текст в скобках для каждой ссылки\n  allCount.textContent = all;\n  completedCount.textContent = completed;\n  uncompletedCount.textContent = uncompleted;\n}\n\n// Функция для сортировки списка по наименованию\nfunction sortListByName(order) {\n  var todoList = document.getElementById(\"todo-list\");\n  var todoItems = Array.from(todoList.querySelectorAll(\"dt\"));\n\n  // Сортируем элементы списка в соответствии с выбранным порядком\n  todoItems.sort(function (a, b) {\n    var textA = a.textContent.toLowerCase();\n    var textB = b.textContent.toLowerCase();\n    if (order === 'asc') {\n      return textA.localeCompare(textB);\n    } else {\n      return textB.localeCompare(textA);\n    }\n  });\n\n  // Удаляем текущие элементы из списка\n  todoList.innerHTML = \"\";\n\n  // Добавляем отсортированные элементы обратно в список\n  todoItems.forEach(function (item) {\n    todoList.appendChild(item);\n  });\n\n  // Устанавливаем обработчик клика на чекбоксы для сохранения списка\n  var checkboxes = todoList.querySelectorAll('input[type=\"checkbox\"]');\n  checkboxes.forEach(function (checkbox) {\n    checkbox.addEventListener('click', saveList);\n  });\n\n  // Сохраняем список в localStorage\n  saveList();\n}\n\n//# sourceURL=webpack://polin/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;